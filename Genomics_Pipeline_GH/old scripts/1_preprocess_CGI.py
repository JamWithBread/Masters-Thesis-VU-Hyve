# test_headers.py

# TODO:
#	1. More versions of CGI files may throw new errors
#	2. Implement multiprocessing (starmap)

import pandas as pd
import os
import re
import gc
import time
import itertools
from tabulate import tabulate

#Paths defined in main()

def read_file(path):

	tr0 = time.time()
	print(f"\tReading file...")

	col_line = None
	with open(path, 'r') as f:
		for line in f:
			if '>' in line or 'locus' in line:
				col_line = col_line
				break

	cols = line.strip('\n').rsplit('\t')
	col_types = {col:str for col in cols}

	df = pd.read_csv(path, sep='\t', names = cols, header = None, comment = '#', dtype=col_types)
	df = df.iloc[1:]

	tr1 = round(time.time()-tr0,2)
	print(f"\tFinished reading, took {tr1}s")

	return df

def get_col_name(df, names):
	#returns the column string that has a matching search term in the list names

	cols = df.columns
	col = [col for col in cols if col in names][0]
	return col

def read_header(file_path):
    
    with open(file_path,"r") as f:
        header_info = []
        while True:
            line = f.readline()
            if line.startswith("#"):
                line = line.replace('\t', " ")
                line = line.replace('\n', "")
                header_info.append(line[1:])
            else:
                break
                
        for x in header_info:
            if 'GENOME_REFERENCE' in x:
                if '36' in x:
                    print('Build 36')
                elif '37' in x:
                    print('Build 37')
                elif '38' in x:
                    print("Build 38")
                else:
                    print("Unknown Build")

        return header_info

def process_CGI_assembly_file(path_to_ASM_file):
	"Converts Complete Genomics variations assembly file into 23andMe-like format" 

	"Read complete genomics assembly variations file"
	CGI_ASM = read_file(path_to_ASM_file)

	#print(f"\tFile read: {len(CGI_ASM)} rows") #remove

	"Remove rows where multiple rsids are present and remove duplicate rsids, keeping the first seen instance"
	df = CGI_ASM[CGI_ASM['xRef'].str.contains(';') == False]
	df = df.drop_duplicates(subset = ['xRef'], keep='first')

	#print(f"\tMulti xRefs removed: {len(df)} rows") #remove

	"Only keep SNP calls"
	df = df[df['varType'].str.contains('snp') == True]
	df = df[df['alleleSeq'].str.len() == 1]

	#print(f"\tRemoved Non SNP calls: {len(df)} rows") #remove


	#var_qual_filter = get_col_name(df,['varQuality','varFilter']) #remove
	#print("\n", df[var_qual_filter].value_counts(), '\n') #remove

	"Remove called variants of low quality"
	accept = ['PASS','VQHIGH']
	var_qual_filter = get_col_name(df,['varQuality','varFilter'])
	df = df[df[var_qual_filter].isin(accept) == True]

	#print(f"\tLow Quality variants removed: {len(df)} rows") #remove

	"Remove dbsnp labels, keep only rsids"
	rsids = df['xRef'].str.split(':',expand=True)
	df.drop(labels = ['xRef'], axis = 1, inplace = True)
	df['rsid'] = rsids[1]

	"Only keep relevant columns"
	df = df[['chromosome','end','reference','alleleSeq','rsid']]

	"Combine ref and alt seq columns into one genotype column"
	genotype = df['reference'] + df['alleleSeq']
	df.drop(labels = ['reference', 'alleleSeq'], axis = 1, inplace = True)
	df['genotype'] = genotype
	df.rename(columns = {'end':'position'}, inplace=True)

	"Remove Mitochondrial SNPs"
	df = df[df['chromosome'].str.contains('M') == False]

	"Remove 'chr' prefix"
	df['chromosome'] = df['chromosome'].str[3:]

	"Reorder table"
	cols = ['rsid', 'chromosome', 'position', 'genotype']
	df = df[cols]
	df = df.reset_index(drop=True)

	return df

def save_file(df, input_file_path, output_path):
	#Save processed file as a 23andMe-like .txt file

	header = read_header(input_file_path)
	h_include = ['This data file generated by Complete Genomics at', header[3]]
	columns = ['rsid', 'chromosome', 'position', 'genotype']
	filename = input_file_path.rsplit('/')[-1]
	new_filename = '_'.join(filename.rsplit("_")[0:2])+'_preprocessed'
	out_path = '{}/{}.txt'.format(output_path,new_filename)

	with open(out_path, 'w') as f:
		#Write Header
		for item in h_include: 
			f.write('# ' + item +'\n')

		#Write Columns
		#f.write('# ')
		for col in columns:
			if col!= 'genotype':
				f.write(col+'\t')
			else:
				f.write(col)
				f.write('\n')

	df.to_csv(r'{}'.format(out_path), header=False, index=None, sep='\t', mode='a')


def main():

	input_dir = '/Users/jerenolsen/Desktop/Genomics Pipeline/input_genomes/'
	output_dir = '/Users/jerenolsen/Desktop/Genomics Pipeline/1. Preprocessing/output/'

	for filename in os.listdir(input_dir):
		if 'CGI' in filename:
			t0 = time.time()
			print(f"Processing {filename}")
			data = process_CGI_assembly_file(input_dir+filename)
			save_file(data, input_dir+filename, output_dir)
			t1 = round(time.time() - t0,2)
			print(f"- Done, took {t1} seconds\n")

		if '23andMe' in filename:
			pass

		else:
			print(f"Invalid filename: "{filename}", must indicate sequence provider")

if __name__ == '__main__':
	main()

